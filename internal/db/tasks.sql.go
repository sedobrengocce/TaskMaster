// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (project_id, title, description, task_type, priority, created_by_user_id) 
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	ProjectID       sql.NullInt32
	Title           string
	Description     sql.NullString
	TaskType        TasksTaskType
	Priority        sql.NullInt32
	CreatedByUserID int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask,
		arg.ProjectID,
		arg.Title,
		arg.Description,
		arg.TaskType,
		arg.Priority,
		arg.CreatedByUserID,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTaskListByProjectId = `-- name: GetTaskListByProjectId :many
SELECT id, project_id, title, description, task_type, priority, created_by_user_id, created_at 
FROM tasks 
WHERE project_id = ? 
ORDER BY created_at DESC
`

func (q *Queries) GetTaskListByProjectId(ctx context.Context, projectID sql.NullInt32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTaskListByProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Title,
			&i.Description,
			&i.TaskType,
			&i.Priority,
			&i.CreatedByUserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByUserId = `-- name: GetTasksByUserId :many
SELECT tasks.id, tasks.project_id, tasks.title, tasks.description, tasks.task_type, tasks.priority, tasks.created_by_user_id, tasks.created_at
FROM tasks
LEFT JOIN shared_tasks ON tasks.id = shared_tasks.task_id
WHERE tasks.created_by_user_id = ? OR shared_tasks.shared_with_user_id = ?
ORDER BY tasks.created_at DESC
`

type GetTasksByUserIdParams struct {
	CreatedByUserID  int32
	SharedWithUserID int32
}

func (q *Queries) GetTasksByUserId(ctx context.Context, arg GetTasksByUserIdParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUserId, arg.CreatedByUserID, arg.SharedWithUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Title,
			&i.Description,
			&i.TaskType,
			&i.Priority,
			&i.CreatedByUserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const shareTaskWithUser = `-- name: ShareTaskWithUser :exec
INSERT INTO shared_tasks (task_id, shared_with_user_id) VALUES (?, ?)
`

type ShareTaskWithUserParams struct {
	TaskID           int32
	SharedWithUserID int32
}

func (q *Queries) ShareTaskWithUser(ctx context.Context, arg ShareTaskWithUserParams) error {
	_, err := q.db.ExecContext(ctx, shareTaskWithUser, arg.TaskID, arg.SharedWithUserID)
	return err
}

const unshareTaskWithUser = `-- name: UnshareTaskWithUser :exec
DELETE FROM shared_tasks WHERE task_id = ? AND shared_with_user_id = ?
`

type UnshareTaskWithUserParams struct {
	TaskID           int32
	SharedWithUserID int32
}

func (q *Queries) UnshareTaskWithUser(ctx context.Context, arg UnshareTaskWithUserParams) error {
	_, err := q.db.ExecContext(ctx, unshareTaskWithUser, arg.TaskID, arg.SharedWithUserID)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET project_id = ?, title = ?, description = ?, task_type = ?, priority = ?
WHERE id = ?
`

type UpdateTaskParams struct {
	ProjectID   sql.NullInt32
	Title       string
	Description sql.NullString
	TaskType    TasksTaskType
	Priority    sql.NullInt32
	ID          int32
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.ProjectID,
		arg.Title,
		arg.Description,
		arg.TaskType,
		arg.Priority,
		arg.ID,
	)
	return err
}
