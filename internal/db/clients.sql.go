// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package db

import (
	"context"
	"database/sql"
)

const getClientByClientID = `-- name: GetClientByClientID :one
SELECT
    client_id,
    client_secret_hash,
    client_type,
    app_name
FROM clients
WHERE client_id = ?
`

type GetClientByClientIDRow struct {
	ClientID         string
	ClientSecretHash sql.NullString
	ClientType       ClientsClientType
	AppName          sql.NullString
}

func (q *Queries) GetClientByClientID(ctx context.Context, clientID string) (GetClientByClientIDRow, error) {
	row := q.db.QueryRowContext(ctx, getClientByClientID, clientID)
	var i GetClientByClientIDRow
	err := row.Scan(
		&i.ClientID,
		&i.ClientSecretHash,
		&i.ClientType,
		&i.AppName,
	)
	return i, err
}

const insertClient = `-- name: InsertClient :exec
INSERT INTO clients (
    client_id,
    client_secret_hash,
    client_type,
    app_name
) VALUES (
    ?, -- client_id
    ?, -- client_secret_hash
    ?, -- client_type
    ? -- app_name
)
`

type InsertClientParams struct {
	ClientID         string
	ClientSecretHash sql.NullString
	ClientType       ClientsClientType
	AppName          sql.NullString
}

func (q *Queries) InsertClient(ctx context.Context, arg InsertClientParams) error {
	_, err := q.db.ExecContext(ctx, insertClient,
		arg.ClientID,
		arg.ClientSecretHash,
		arg.ClientType,
		arg.AppName,
	)
	return err
}
