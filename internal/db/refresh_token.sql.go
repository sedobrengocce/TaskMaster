// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_token.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT
    user_id,
    token_hash,
    expires_at,
    created_at,
    ip_address,
    user_agent
FROM refresh_tokens
WHERE user_id = ?
`

type GetRefreshTokenRow struct {
	UserID    int64
	TokenHash string
	ExpiresAt time.Time
	CreatedAt sql.NullTime
	IpAddress string
	UserAgent string
}

func (q *Queries) GetRefreshToken(ctx context.Context, userID int64) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, userID)
	var i GetRefreshTokenRow
	err := row.Scan(
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
INSERT INTO refresh_tokens (
    user_id,
    token_hash,
    expires_at,
    created_at,
    ip_address,
    user_agent
) VALUES (
    ?, -- user_id
    ?, -- token_hash
    ?, -- expires_at
    NOW(), -- created_at
    ?, -- ip_address
    ? -- user_agent
)
ON DUPLICATE KEY UPDATE
    token_hash = VALUES(token_hash),
    expires_at = VALUES(expires_at),
    created_at = NOW(),
    ip_address = VALUES(ip_address),
    user_agent = VALUES(user_agent),
    revoked_at = NULL
`

type InsertRefreshTokenParams struct {
	UserID    int64
	TokenHash string
	ExpiresAt time.Time
	IpAddress string
	UserAgent string
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertRefreshToken,
		arg.UserID,
		arg.TokenHash,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET
    revoked_at = NOW()
WHERE user_id = ?
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, userID)
	return err
}
