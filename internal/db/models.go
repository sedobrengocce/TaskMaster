// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type TasksTaskType string

const (
	TasksTaskTypeSingle     TasksTaskType = "single"
	TasksTaskTypeRepetitive TasksTaskType = "repetitive"
)

func (e *TasksTaskType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TasksTaskType(s)
	case string:
		*e = TasksTaskType(s)
	default:
		return fmt.Errorf("unsupported scan type for TasksTaskType: %T", src)
	}
	return nil
}

type NullTasksTaskType struct {
	TasksTaskType TasksTaskType
	Valid         bool // Valid is true if TasksTaskType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTasksTaskType) Scan(value interface{}) error {
	if value == nil {
		ns.TasksTaskType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TasksTaskType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTasksTaskType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TasksTaskType), nil
}

type Project struct {
	ID        int32
	UserID    int32
	Name      string
	ColorHex  sql.NullString
	CreatedAt sql.NullTime
}

type Task struct {
	ID              int32
	ProjectID       sql.NullInt32
	Title           string
	Description     sql.NullString
	TaskType        TasksTaskType
	Priority        sql.NullInt32
	CreatedByUserID int32
	CreatedAt       sql.NullTime
}

type TaskLog struct {
	ID                int32
	TaskID            int32
	CompletedByUserID int32
	CompletedAt       sql.NullTime
}

type User struct {
	ID           int32
	Email        string
	PasswordHash string
	CreatedAt    sql.NullTime
}
