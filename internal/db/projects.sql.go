// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package db

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :exec
INSERT INTO projects (user_id, name, color_hex) VALUES (?, ?, ?)
`

type CreateProjectParams struct {
	UserID   int32
	Name     string
	ColorHex sql.NullString
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) error {
	_, err := q.db.ExecContext(ctx, createProject, arg.UserID, arg.Name, arg.ColorHex)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProjectById = `-- name: GetProjectById :one
SELECT id, user_id, name, color_hex, created_at FROM projects WHERE id = ?
`

func (q *Queries) GetProjectById(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectById, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.ColorHex,
		&i.CreatedAt,
	)
	return i, err
}

const getProjectsByUserId = `-- name: GetProjectsByUserId :many
SELECT id, user_id, name, color_hex, created_at FROM projects WHERE user_id = ? ORDER BY created_at DESC
`

func (q *Queries) GetProjectsByUserId(ctx context.Context, userID int32) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.ColorHex,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :exec
UPDATE projects SET name = ?, color_hex = ? WHERE id = ?
`

type UpdateProjectParams struct {
	Name     string
	ColorHex sql.NullString
	ID       int32
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject, arg.Name, arg.ColorHex, arg.ID)
	return err
}
