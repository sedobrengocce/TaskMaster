// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    email,
    password_hash
) VALUES (
    ?, ?
)
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
}

// Crea un nuovo utente e restituisce l'utente appena creato.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Email, arg.PasswordHash)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

// Elimina un utente e restituisce l'utente eliminato.
func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmailAndPassword = `-- name: GetUserByEmailAndPassword :one
SELECT id, email, password_hash, created_at FROM users
WHERE email = ? AND password_hash = ?
LIMIT 1
`

type GetUserByEmailAndPasswordParams struct {
	Email        string
	PasswordHash string
}

// Recupera un utente dal suo indirizzo email e dalla password.
func (q *Queries) GetUserByEmailAndPassword(ctx context.Context, arg GetUserByEmailAndPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailAndPassword, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, created_at FROM users
WHERE id = ? LIMIT 1
`

// Recupera un utente dal suo ID.
func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByTerm = `-- name: GetUserByTerm :many
SELECT id, email, password_hash, created_at FROM users
WHERE email ILIKE '%' || ? || '%'
`

// Recupera gli utenti che corrispondono a un termine di ricerca.
func (q *Queries) GetUserByTerm(ctx context.Context, dollar_1 interface{}) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserByTerm, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    email = ?,
    password_hash = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Email        string
	PasswordHash string
	ID           int32
}

// Aggiorna un utente esistente e restituisce l'utente aggiornato.
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Email, arg.PasswordHash, arg.ID)
	return err
}
